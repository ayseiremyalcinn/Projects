import java.io.*;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.util.Map;
import java.util.Scanner;


/**
 * This class accomplishes Mission Firewall
 */
public class MalwareScanner {

    private final Map<String, Malware> malwareDB;

    public MalwareScanner(Map<String, Malware> malwareDB) throws FileNotFoundException {
        this.malwareDB = malwareDB;
    }

    /**
     * TODO: Open and read the input file while searching for threats
     * TODO: Write results to both; a new file name "scanLog.txt" and to the console
     *
     * @param filename the input file
     * @throws IOException the io exception
     */
    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("scanLog.txt", true), StandardCharsets.UTF_8));

    public void scanFile(String filename) throws IOException {
        System.out.println("Started scanning...\n--------------------------------------------------------------------------------");
        Scanner scanner = new Scanner(new File(filename));
        int lineNumber = 1;
        int malwareCounter = 0;
        while(scanner.hasNextLine()){
            String line = scanner.nextLine();
            String hash = turbo64(line);

            if(malwareDB.get(hash) != null){
                System.out.println("Detected malware!\n" + "Name: " + malwareDB.get(hash).getTitle() + "\nThreat Level: " + malwareDB.get(hash).getLevel() + "\nHash:" + hash);
                System.out.println("--------------------------------------------------------------------------------");
                writer.write(hash + "@" + lineNumber + "\n");
                malwareCounter++;
            }
            lineNumber++;
        }
        System.out.println("Scan complete! " + malwareCounter + " threats are found and eliminated. Generating log file...");
        writer.close();
        scanner.close();
    }

    public static String turbo64(String input) {
        long modTurbo =  4294967291L;
        long a = 0, b = 1;

        for (int letter: input.getBytes(StandardCharsets.UTF_8)) {
            a = (a + letter) % modTurbo;
            b = (a + b) % modTurbo;
        }
        return Long.toHexString((b << 32) | a);
    }
}
